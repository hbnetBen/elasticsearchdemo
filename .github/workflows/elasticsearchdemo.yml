# This workflow will build a Java project with Maven
# For more information see: https://help.github.com/actions/language-and-framework-guides/building-and-testing-java-with-maven
name: Java CI with Maven
on:
 push:
 branches: [ master ]
 pull_request:
 branches: [ develop, master ]
jobs:
 build-test:
 runs-on: ubuntu-latest
 steps:
 - uses: actions/checkout@v2
 - name: Set up JDK 11.0.8 for x64
 uses: actions/setup-java@v1
 with:
 java-version: '11.0.8'
 architecture: x64
 - name: Cache local Maven repository
 uses: actions/cache@v2
 with:
 path: ~/.m2/repository
 key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
 restore-keys: |
 ${{ runner.os }}-maven-
 - name: Build and Test with Maven
 run: |
 mvn -B package --file pom.xml -Dspring.profiles.active=test
 mkdir staging
 cp target/*.war staging
 - uses: actions/upload-artifact@v2
 with:
 name: Package
 path: staging
 deploy:
 runs-on: ubuntu-latest
 needs: [ build-test ]
 steps:
 - uses: actions/checkout@v1
 - name: Download built package from build-test job
 uses: actions/download-artifact@v2
 with:
 name: Package
 - name: Deploy artifact if pushed to master and previous job [build-test] was successful
 # if: ${{ github.event }}
 run: |
 APPNAME=ibeh/kindredhair # example
 docker login -u ${{ secrets.DOCKER_USER }} -p ${{ secrets.DOCKER_PASS }}
 docker build . -t $APPNAME
 docker push $APPNAME:latest
 # set the env var SSH_PATH as the path to the ssh folder
 SSH_PATH="$HOME/.ssh"
 # create the ssh path and create known_hosts file.
 mkdir -p "$SSH_PATH"
 touch "$SSH_PATH/known_hosts"
 # insert the private key into the deploy_key file
 echo "$PRIVATE_KEY" > "$SSH_PATH/deploy_key"
 
 # add the proper permissions for the ssh files (This is required for the ssh to work)
 chmod 700 "$SSH_PATH"
 chmod 600 "$SSH_PATH/known_hosts"
 # this permission can also be 400 instead of 600
 chmod 600 "$SSH_PATH/deploy_key"
 # The ssh-agent command outputs commands to set certain environment variables in the shell
 eval $(ssh-agent)
 ssh-add "$SSH_PATH/deploy_key"
 ssh-keyscan -t rsa $SERVER_URL >> "$SSH_PATH/known_hosts"
 CONTAINERNAME=kindredhair
 ssh ec2-user@$SERVER_URL "docker stop $CONTAINERNAME"
 ssh ec2-user@$SERVER_URL "docker container rm $CONTAINERNAME"
 ssh ec2-user@$SERVER_URL "docker pull $APPNAME:latest"
 ssh ec2-user@$SERVER_URL "docker run -t -i -p 80:8080 -e DATABASE_URL=$DB_URL -e SPRING_DATASOURCE_USERNAME=$DB_USERNAME -e SPRING_DATASOURCE_PASSWORD=$DB_PASSWORD -d --name $CONTAINERNAME $APPNAME:latest"
 env:
 SERVER_URL: ${{ secrets.SERVER_URL }} # url to ec2 instance e.g blahblah.com
 DB_USERNAME: ${{ secrets.DB_USER }}
 DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
 PRIVATE_KEY: ${{ secrets.SSH_KEY }}
 DB_URL: # add url with prefix and suffix
